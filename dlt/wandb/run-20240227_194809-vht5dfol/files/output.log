

Epoch 0: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 104/104 [00:02<00:00, 49.39it/s, loss=3.07, lr=2.08e-6, step=104]Traceback (most recent call last):
  File "/home/sehwan/MIIL/CA-layout-generation/dlt/main.py", line 104, in <module>
    app.run(main)
  File "/home/sehwan/anaconda3/envs/CAL/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/home/sehwan/anaconda3/envs/CAL/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/home/sehwan/MIIL/CA-layout-generation/dlt/main.py", line 76, in main
    TrainLoopCAL(accelerator=accelerator, model=model, diffusion=noise_scheduler,
  File "/home/sehwan/MIIL/CA-layout-generation/dlt/trainers/cal_trainer.py", line 222, in train
    self.CAL_train_epsilon(epoch)
  File "/home/sehwan/MIIL/CA-layout-generation/dlt/trainers/cal_trainer.py", line 577, in CAL_train_epsilon
    val_noisy_image_features = self.diffusion.add_noise_Geometry(val_batch['image_features'], val_t, val_img_feature_noise)
  File "/home/sehwan/MIIL/CA-layout-generation/dlt/diffusion.py", line 183, in add_noise_Geometry
    noised_Geometry = super().add_noise(original_samples=Geometry, timesteps=timesteps, noise=noise)
  File "/home/sehwan/anaconda3/envs/CAL/lib/python3.9/site-packages/diffusers/schedulers/scheduling_ddpm.py", line 524, in add_noise
    noisy_samples = sqrt_alpha_prod * original_samples + sqrt_one_minus_alpha_prod * noise
RuntimeError: The size of tensor a (64) must match the size of tensor b (46) at non-singleton dimension 0
#######################################################################################3
batch:  {'geometry': tensor([[[0.5000, 0.5000, 0.3469, 0.7815, 0.0000, 0.0000],
         [0.8113, 0.7927, 0.2750, 0.0657, 0.0000, 0.0500],
         [0.1887, 0.7927, 0.2750, 0.0657, 0.0000, 0.1000],
         ...,
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],
        [[0.1821, 0.9000, 1.0141, 0.0028, 0.0000, 0.0500],
         [0.2879, 0.6327, 0.3250, 0.2889, 0.0000, 0.2500],
         [0.4809, 0.2419, 1.0391, 0.7056, 0.0000, 0.1500],
         ...,
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],
        [[0.1991, 0.6465, 0.3255, 0.2889, 0.0000, 0.1500],
         [0.8113, 0.8972, 0.2750, 0.0657, 0.0000, 0.0000],
         [0.1821, 0.9000, 1.0141, 0.0028, 0.0000, 0.0500],
         ...,
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],
        ...,
        [[0.5000, 0.8631, 0.1677, 0.0806, 0.0000, 0.0500],
         [0.9256, 1.3613, 0.3854, 1.9130, 0.0000, 0.2000],
         [0.0156, 1.1045, 0.6687, 1.9352, 0.0000, 0.0000],
         ...,
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],
        [[0.8924, 0.8140, 0.1026, 0.1824, 0.0000, 1.2500],
         [0.1431, 0.5477, 0.1750, 0.0657, 0.0000, 0.5000],
         [0.7828, 0.8118, 0.0990, 0.1778, 0.0000, 0.9000],
         ...,
         [0.2762, 0.6690, 0.0896, 0.0213, 0.0000, 0.3000],
         [0.0682, 0.1202, 0.0240, 0.0444, 0.0000, 1.1500],
         [0.7422, 0.5129, 0.0911, 0.0213, 0.0000, 1.0500]],
        [[0.6755, 0.3789, 0.0240, 0.0454, 0.0000, 0.1000],
         [0.8597, 0.3789, 0.0234, 0.0454, 0.0000, 0.1500],
         [0.2063, 0.7002, 0.3000, 0.3991, 0.0000, 0.3000],
         ...,
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]], device='cuda:0'), 'image_features': tensor([[[-0.0032,  0.4932, -0.0477,  ...,  0.3444, -0.5041, -0.2087],
         [-0.1639,  0.1471, -0.1704,  ...,  1.3076, -0.3325, -0.0350],
         [ 0.1413,  0.2700,  0.2391,  ...,  0.7313,  0.0019,  0.0659],
         ...,
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
        [[ 0.0428, -0.1529,  0.2041,  ...,  0.7439,  0.0333, -0.0634],
         [-0.1964, -0.3009,  0.2990,  ...,  0.3878,  0.1492,  0.1267],
         [-0.0222,  0.1819, -0.1307,  ...,  0.7070, -0.0036,  0.1958],
         ...,
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
        [[-0.2293, -0.2253,  0.3079,  ...,  0.2938, -0.0016, -0.0338],
         [-0.1639,  0.1471, -0.1704,  ...,  1.3076, -0.3325, -0.0350],
         [ 0.0428, -0.1529,  0.2041,  ...,  0.7439,  0.0333, -0.0634],
         ...,
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
        ...,
        [[-0.1573,  0.0497, -0.4122,  ...,  0.5542,  0.9117,  0.1159],
         [ 0.1671,  0.1775, -0.3020,  ...,  0.6551, -0.2981,  0.0021],
         [ 0.3713,  0.1154, -0.2680,  ...,  0.4823, -0.1601,  0.0781],
         ...,
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
        [[-0.1049, -0.1860, -0.1899,  ...,  0.3910,  0.1846,  0.0231],
         [-0.0420,  0.0296,  0.2410,  ...,  0.4017, -0.0143,  0.4201],
         [-0.4617,  0.0297, -0.2596,  ...,  0.4353,  0.1126, -0.3705],
         ...,
         [-0.1503, -0.2634, -0.5655,  ...,  0.7723, -0.3643, -0.2934],
         [ 0.1668, -0.1336, -0.3360,  ...,  0.5577,  0.2162, -0.3680],
         [-0.1503, -0.2634, -0.5655,  ...,  0.7723, -0.3643, -0.2934]],
        [[ 0.0758, -0.1220, -0.3821,  ...,  0.6424,  0.1732, -0.2942],
         [ 0.0998, -0.1664, -0.1242,  ...,  0.6598, -0.0931, -0.0911],
         [-0.0138, -0.0533, -0.1664,  ...,  0.0907, -0.0967,  0.0611],
         ...,
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]]],
       device='cuda:0'), 'padding_mask': tensor([[[1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         ...,
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0]],
        [[1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         ...,
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0]],
        [[1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         ...,
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0]],
        ...,
        [[1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         ...,
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0]],
        [[1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         ...,
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1]],
        [[1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1],
         ...,
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0]]], device='cuda:0', dtype=torch.int32), 'padding_mask_img': tensor([[[1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         ...,
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0]],
        [[1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         ...,
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0]],
        [[1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         ...,
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0]],
        ...,
        [[1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         ...,
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0]],
        [[1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         ...,
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1]],
        [[1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         [1, 1, 1,  ..., 1, 1, 1],
         ...,
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0]]], device='cuda:0', dtype=torch.int32), 'cat': tensor([[1, 4, 4,  ..., 0, 0, 0],
        [3, 4, 4,  ..., 0, 0, 0],
        [4, 4, 3,  ..., 0, 0, 0],
        ...,
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 3, 1, 3],
        [1, 1, 1,  ..., 0, 0, 0]], device='cuda:0')}
#######################################################################################3